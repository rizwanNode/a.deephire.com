swagger: "2.0"
info:
  version: 1.0.0
  title: DeepHireNodeAPI
  description: Automate the recruiting process with one-way video interviews
basePath: /v1


consumes:
  - application/json
produces:
  - application/json

definitions:
  ExampleBody:
    type: object
    title: example
    required:
      - name
    properties:
      name:
        type: string
        example: no_stress
  EmailBody:
    type: object
    title: email
    required:
      - recipients
      - template
    properties:
      videoId: "123456789"
      recipients:
        # ArrayOfStr:
        type: array
        items:
          type: string
        example: ["russell@deephire.com"]
      template:
        type: string
        example: completed-interview-recruiter-notification
      interviewName:
        type: string
        example: Russell's Test Interview
      shortUrl:
        type: string
        example: https://deephire.com/test

  CompanyBody:
    type: object
    title: company
    required:
      - owner
      - companyName
    properties:
      owner:
        type: string
        example: russell@deephire.com
      companyName:
        type: string
        example: Forge


  PutCompany:
    type: object
    title: company
    properties:
      companyName:
        type: string
        example: Forge

  CandidateBody:
    type: object
    title: candidate

    properties:
      youtubeUrls:
        type: array
        items:
          type: string
        example:
          [
            "https://www.youTube.com/watch?v=QSmXvcrtTpM",
            "https://www.youTube.com/watch?v=emTHLFKcSWQ",
          ]
  ShortlistBody:
    type: object
    title: shortlist
    properties:
      userId:
        type: string
        example: exampleData
      youtubeUrls:
        type: array
        items:
          type: string
        example: ["ar1", "ar3"]

  ArchiveBody:
    type: array
    items:
      type: string
    example: ["5c79e7a9fe6cd943bd499802", "5c79e827fe6cd943bd499803"]

  ArchiveVideoBody:
    type: array
    items:
      type: number
    example: [0]

  
  VideoBody:
    type: object
    title: video
    required:
      - candidateEmail
    properties:
      userId:
        type: string
        example: facebook|1948444908830936
      candidateEmail:
        type: string
        example: russell@test.com
      interviewId:
        type: string
        example: 5c4c8d0b7cebba000854883d
      interviewName:
        type: string
        example: Russell's Test Interview
      userName:
        type: string
        example: Russell Ratcliffe
      responses:
        type: object
        title: responses
        properties:
          question:
            type: string
            example: whats your name?
          response:
            type: string
            example: https://www.youtube.com/watch?v=5pX3mwnAvyo
  EventBody:
    type: object
    title: event
    properties:
      candidateEmail:
        type: string
        example: russell@deephire.com
      companyId:
        type: string
        example: 5dc5d305a4ea435efa57f644
      interviewName:
        type: string
        example: Remote Interview
      userName:
        type: string
        example:  Russell Ratcliffe

  DocumentBody:
    type: object
    title: document
    required:
      - file
      - objectKey
    properties:
      objectKey:
        type: string
        example: russell@test.com
      file:
        type: object
        title: responses
        properties:
          uid:
            type: string
            example: whats your name?
  InterviewBody:
    type: object
    title: interview
    required:
      - interviewName
      - interviewQuestions
   
    properties:
      interviewQuestions:
        # ArrayOfStr:
        type: array
        items:
          type: object
          title: questions
          properties:
            question:
              type: string
              example: Tell us about yourself. 
            hint:
              type: string
              example: "Example: Hello my name is [Your Name]. I've been working as a [Profession] for [Number of] years.)"
            questionInfo:
              type: string
              example: "This question is meant to give a quick summary of your relevant experience"
            tips:
              type: array
              items:
                type: string
              example:
                [
                  "Make sure you are in a quiet location",
                  "Focus on things you have done that are most relevant to what you want to do next",
                ]
            exampleVideos:
              type: array
              items:
                type: string
              example:
                [
                  "https://www.youtube.com/watch?v=Tg6BVRTsuic",
                  "https://www.youtube.com/watch?v=4I3EhIFVHlA", 
                ]
            answerTime:
              type: number
              example: 60
            

        #   type: string
        # example: ["russell@deephire.com"]
      interviewName:
        type: string
        example: DH Sales Interview
      interviewConfig:
        type: object
        title: config
        properties:
          retakesAllowed:
            type: number
            example: 8
          prepTime:
            type: number
            example: 45
          answerTime:
            type: number
            example: 90
  TeamObject:
    type: array
    items:
      type: object
      properties:
        email:
          type: string
        email_verified:
          type: boolean
        name:
          type: string
        given_name:
          type: string
        family_name:
          type: string
        picture:
          type: string
        locale:
          type: string
        updated_at:
          type: string
        user_id:
          type: string
        nickname:
          type: string
        identities:
          type: array
          items:
            type: object
            properties:
              provider:
                type: string
              access_token:
                type: string
              expires_in:
                type: integer
              user_id:
                type: string
              connection:
                type: string
              isSocial:
                type: boolean
            required:
            - provider
            - access_token
            - expires_in
            - user_id
            - connection
            - isSocial
        created_at:
          type: string
        user_metadata:
          type: object
        last_login:
          type: string
        last_ip:
          type: string
        logins_count:
          type: integer
        app_metadata:
          type: object
          properties:
            companyId:
              type: string
          required:
          - companyId
      required:
      - email
      - email_verified
      - name
      - given_name
      - family_name
      - picture
      - locale
      - updated_at
      - user_id
      - nickname
      - identities
      - created_at
      - user_metadata
      - last_login
      - last_ip
      - logins_count
      - app_metadata
      

paths:
  /shortlists:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Shortlists
      description: Fetch all recruiter shortlist data
      responses:
        200:
          description: Returns all recruiter shortlist data
    post:
      tags:
        - Shortlists
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - in: body
          name: body
          description: Create a new shortlist
          required: true
          schema:
            $ref: "#/definitions/ShortlistBody"
      responses:
        201:
          description: Resource created or updated
        500:
          description: Error!

  /shortlists/{id}:
    get:
      tags:
        - Shortlists
      parameters:
        - name: id
          in: path
          required: true
          description: The object id of the shortlist to fetch
          type: string
      responses:
        204:
          description: The shortlist with the specified ID was successfully fetched
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Shortlist with given ID did not exist
    put:
      tags:
        - Shortlists
      description: Update Shortlist Data
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
        - in: body
          name: body
          description: an example
          required: true
          schema:
            $ref: "#/definitions/ShortlistBody"
      responses:
        200:
          description: Created or Updated Resource

  /shortlists/archives:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Shortlists
      description: Fetch all archives recruiter shortlist data
      responses:
        200:
          description: Returns all archives recruiter shortlist data

  /shortlists/archive:
    post:
      tags:
        - Shortlists
      description: Archive shortlists
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to archive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Archive Successful

  /shortlists/unarchive:
    post:
      tags:
        - Shortlists
      description: Unarchive shortlists
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to unarchive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Unarchive Successful

  /videos:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Videos
      description: Fetch all video interviews
      responses:
        200:
          description: Returns all video interviews
    post:
      tags:
        - Videos
      description: Create or Update a Video
      parameters:
        - name: video
          in: body
          description: a video
          required: true
          schema:
            $ref: "#/definitions/VideoBody"
      responses:
        201:
          description: Video Created
  /videos/filter:
    get:
      tags:
        - Videos
      summary: "Filter candidate videos"
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: candidateEmail
          in: query
          description: Email to filter by
          required: false
          type: string
        # collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid email value"
  /videos/{id}:
    get:
      tags:
        - Videos
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the example to retrieve
          type: string
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not found
    delete:
      tags:
        - Videos
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: id
          in: path
          required: true
          description: The id of the users interview document (_id)
          type: string
      responses:
        204:
          description: The candidate video interview with the specified ID was successfully deleted
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Candidate video unterview with given IDs did not exist

  /videos/archives:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Videos
      description: Fetch all archives video interviews
      responses:
        200:
          description: Returns all archives video interviews

  
  /videos/{id}/archive:
    post:
      tags:
        - Videos
      description: Archive a Video response
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: id
          in: path
          description: id
          type: string
          required: true
        - name: index
          in: body
          description: index to archive
          required: true
          schema:
            $ref: "#/definitions/ArchiveVideoBody"
      responses:
        200:
          description: Archive Successful

  /videos/{id}/unarchive:
    post:
      tags:
        - Videos
      description: Archive a Video response
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: id
          in: path
          description: id
          type: string
          required: true
        - name: index
          in: body
          description: index to archive
          required: true
          schema:
            $ref: "#/definitions/ArchiveVideoBody"
      responses:
        200:
          description: Archive Successful
  /videos/archive:
    post:
      tags:
        - Videos
      description: Archive videos
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to archive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Archive Successful

  /videos/unarchive:
    post:
      tags:
        - Videos
      description: Unarchive videos
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to unarchive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Unarchive Successful

  /videos/{id}/{questionId}:
    delete:
      tags:
        - Videos
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: id
          in: path
          required: true
          description: The id of the users interview document (_id)
          type: string
        - name: questionId
          in: path
          required: true
          description: The question id
          type: string
      responses:
        204:
          description: The candidate video question with the specified ID was successfully deleted
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Candidate video with given IDs did not exist

  /interviews:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Interviews
      description: Fetch all interviews
      responses:
        200:
          description: Returns all interviews
    post:
      tags:
        - Interviews
      description: Create an Interview
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: interview
          in: body
          description: a new interview
          required: true
          schema:
            $ref: "#/definitions/InterviewBody"
      responses:
        201:
          description: Video Created

  /interviews/duplicate:
    post:
      tags:
        - Interviews
      description: Duplicate interviews
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to duplicate
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Duplicate Successful

  /interviews/{id}:
    get:
      tags:
        - Interviews
      parameters:
        - name: id
          in: path
          required: true
          description: The object id of the interview to get
          type: string
      responses:
        200:
          description: The interview with the specified ID was successfully returned
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Interview with given ID did not exist
    put:
      tags:
        - Interviews
      parameters:
        - name: id
          in: path
          required: true
          description: The object id of the interview to put
          type: string
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: interview
          in: body
          description: a new interview
          required: true
          schema:
            $ref: "#/definitions/InterviewBody"
      responses:
        200:
          description: The interview with the specified ID was successfully updated
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Interview with given ID did not exist
    delete:
      tags:
        - Interviews
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: id
          in: path
          required: true
          description: The object id of the interview to delete
          type: string
      responses:
        204:
          description: The interview with the specified ID was successfully deleted
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Interview with given ID did not exist

  /interviews/archives:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Interviews
      description: Fetch all archives interviews
      responses:
        200:
          description: Returns all archives interviews

  /interviews/archive:
    post:
      tags:
        - Interviews
      description: Archive interviews
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to archive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Archive Successful

  /interviews/unarchive:
    post:
      tags:
        - Interviews
      description: Unarchive interviews
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to unarchive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Unarchive Successful

  /candidates/{email}:
    get:
      tags:
        - Candidates
      parameters:
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
      responses:
        200:
          description: Fetched the candidates info
        400:
          description: Malformed ID
        404:
          description: Candidate with given ID did not exist
    put:
      tags:
        - Candidates
      description: Create/Update Candidate Data
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
        - in: body
          name: body
          description: an example
          required: true
          schema:
            $ref: "#/definitions/CandidateBody"
      responses:
        200:
          description: Created or Updated Resource

  /candidates/{email}/documents/:
    post:
      tags:
        - Candidates
      description: Upload candidate documents to S3
      consumes:
        - multipart/form-data
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
        - in: formData
          name: upfile
          type: file
          description: The file to upload.

      responses:
        200:
          description: Created file on S3

  /candidates/{email}/documents/{id}:
    get:
      tags:
        - Candidates
      description: Get candidate document from s3
      parameters:
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
        - name: id
          in: path
          required: true
          description: num of file
          type: string
      responses:
        200:
          description: Got file from S3
    delete:
      tags:
        - Candidates
      description: Delete candidate subdocument
      parameters:
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
        - name: id
          in: path
          required: true
          description: id of file to delete
          type: string
      responses:
        200:
          description: file deleted
  /emails:
    post:
      tags:
        - Emails
      parameters:
        # - name: authorization
        #   in: header
        #   description: Bearer <auth_token>
        #   required: true
        #   type: string
        - in: body
          name: body
          description: "Send emails from russell@deephire.com"
          required: true
          schema:
            $ref: "#/definitions/EmailBody"
      responses:
        201:
          description: Email sent
        500:
          description: Error!

  /companies:
    get:
      tags:
        - Companies
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      responses:
        200:
          description: Returns company associated with your account
        400:
          description: Invalid ObjectId attached to your account
        404:
          description: You don't have a company
    post:
      tags:
        - Companies
      parameters:
        # - name: authorization
        #   in: header
        #   description: Bearer <auth_token>
        #   required: true
        #   type: string
        - in: body
          name: body
          description: "Add Company Name or Logo"
          required: true
          schema:
            $ref: "#/definitions/CompanyBody"
      responses:
        201:
          description: Info Added
        500:
          description: Error!
    put:
      tags:
        - Companies
      description: Add/add data for your company
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - in: body
          name: body
          description: "add company data"
          required: true
          schema:
            $ref: "#/definitions/PutCompany"
      responses:
        200:
          description: Created file on S3


  /companies/team:
    get:
      tags:
        - Companies
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      responses:
        200:
          description: Returns your team members
          schema:
            $ref: "#/definitions/TeamObject"
        400:
          description: Invalid ObjectId attached to your account
        404:
          description: You don't belong to a company

  /companies/logo:
    put:
      tags:
        - Companies
      description: Upload file to s3 and store public link in company object accociated with your account
      consumes:
        - multipart/form-data
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - in: formData
          name: upfile
          type: file
          description: The file to upload.

      responses:
        200:
          description: Created file on S3
  
          
  /companies/{companyId}:
    get:
      tags:
        - Companies
      parameters:
        - name: companyId
          in: path
          required: true
          description: The ID of the company to retrieve
          type: string
      responses:
        200:
          description: Returns company information
        400:
          description: Invalid ObjectId
        404:
          description: A company with that id is not found
  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification

  /files/{key}:
    post:
      tags:
        - Files
      description: Upload file documents to S3
      consumes:
        - multipart/form-data
      parameters:
        - name: key
          in: path
          required: true
          description: key
          type: string
        - in: formData
          name: upfile
          type: file
          description: The file to upload.

      responses:
        200:
          description: Created file on S3


  /events/started:
    post:
      tags:
        - Events
      parameters:
        - in: body
          name: body
          description: Interview Started Event
          required: true
          schema:
            $ref: "#/definitions/EventBody"
      responses:
        201:
          description: Event Submitted
        500:
          description: Error!

  /events/victory:
    post:
      tags:
        - Events
      parameters:
        - in: body
          name: body
          description: Create a new shortlist
          required: true
          schema:
            $ref: "#/definitions/EventBody"
      responses:
        201:
           description: Event Submitted
        500:
          description: Error!