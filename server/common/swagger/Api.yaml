swagger: "2.0"
info:
  version: 1.0.0
  title: DeepHireNodeAPI
  description: Automate the recruiting process with one-way video interviews
basePath: /v1
tags:
  - name: Examples
    description: Simple example endpoints
  - name: Specification
    description: The swagger API specification

consumes:
  - application/json
produces:
  - application/json

definitions:
  ExampleBody:
    type: object
    title: example
    required:
      - name
    properties:
      name:
        type: string
        example: no_stress
  EmailBody:
    type: object
    title: email
    required:
      - recipients
      - type
    properties:
      recipients:
        # ArrayOfStr:
        type: array
        items:
          type: string
        example: ["russell@deephire.com"]
      type:
        type: string
        example: interviewCreated
      interviewName:
        type: string
        example: Russell's Test Interview
      shortUrl:
        type: string
        example: https://deephire.com/test

  CompanyBody:
    type: object
    title: company
    required:
      - email
    properties:
      email:
        type: string
        example: russell@deephire.com
      name:
        type: string
        example: Forge
      logo:
        type: string
        example: https://www.kiwiclubny.org/wordpress1/wp-content/uploads/2012/08/dub.logo_.url_.blk_1.jpg
  CandidateBody:
    type: object
    title: candidate

    properties:
      youtubeUrls:
        type: array
        items:
          type: string
        example:
          [
            "https://www.youTube.com/watch?v=QSmXvcrtTpM",
            "https://www.youTube.com/watch?v=emTHLFKcSWQ",
          ]
  ShortlistBody:
    type: object
    title: shortlist
    properties:
      userId:
        type: string
        example: uselessdata
      youtubeUrls:
        type: array
        items:
          type: string
        example: ["ar1", "ar3"]

  ArchiveBody:
    type: array
    items:
      type: string
    example: ["5c79e7a9fe6cd943bd499802", "5c79e827fe6cd943bd499803"]

  VideoBody:
    type: object
    title: video
    required:
      - candidateEmail
    properties:
      userId:
        type: string
        example: facebook|1948444908830936
      candidateEmail:
        type: string
        example: russell@test.com
      interviewId:
        type: string
        example: 5c4c8d0b7cebba000854883d
      interviewName:
        type: string
        example: Russell's Test Interview
      userName:
        type: string
        example: Russell Ratcliffe
      responses:
        type: object
        title: responses
        properties:
          question:
            type: string
            example: whats your name?
          response:
            type: string
            example: https://www.youtube.com/watch?v=5pX3mwnAvyo
  TestBody:
    type: object
    title: video
    properties:
      objectKey:
        type: string
        example: email_filename
      responses:
        type: object
        title: responses
        properties:
          uid:
            type: string
            example: whats your name?
  DocumentBody:
    type: object
    title: document
    required:
      - file
      - objectKey
    properties:
      objectKey:
        type: string
        example: russell@test.com
      file:
        type: object
        title: responses
        properties:
          uid:
            type: string
            example: whats your name?
  InterviewBody:
    type: object
    title: interview
    required:
      - interviewName
      - interviewQuestions
      - interviewConfig
    properties:
      interviewQuestions:
        # ArrayOfStr:
        type: array
        items:
          type: object
          title: questions
          properties:
            question:
              type: string
              example: Tell me about yourself (test)

        #   type: string
        # example: ["russell@deephire.com"]
      interviewName:
        type: string
        example: DH Sales Interview
      interviewConfig:
        type: object
        title: config
        required:
          - retakesAllowed
          - prepTime
          - answerTime
        properties:
          retakesAllowed:
            type: number
            example: 8
          prepTime:
            type: number
            example: 45
          answerTime:
            type: number
            example: 90

paths:
  /examples:
    get:
      tags:
        - Examples
      description: Fetch all examples
      responses:
        200:
          description: Returns all examples
    post:
      tags:
        - Examples
      description: Create a new example
      parameters:
        - name: example
          in: body
          description: an example
          required: true
          schema:
            $ref: "#/definitions/ExampleBody"
      responses:
        201:
          description: Example Created

  /examples/{id}:
    get:
      tags:
        - Examples
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the example to retrieve
          type: integer
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not found

  /shortlists:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Shortlists
      description: Fetch all recruiter shortlist data
      responses:
        200:
          description: Returns all recruiter shortlist data
    post:
      tags:
        - Shortlists
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - in: body
          name: body
          description: Create a new shortlist
          required: true
          schema:
            $ref: "#/definitions/ShortlistBody"
      responses:
        201:
          description: Resource created or updated
        500:
          description: Error!

  /shortlists/{id}:
    get:
      tags:
        - Shortlists
      parameters:
        - name: id
          in: path
          required: true
          description: The object id of the shortlist to fetch
          type: string
      responses:
        204:
          description: The shortlist with the specified ID was successfully fetched
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Shortlist with given ID did not exist
    put:
      tags:
        - Shortlists
      description: Update Shortlist Data
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
        - in: body
          name: body
          description: an example
          required: true
          schema:
            $ref: "#/definitions/ShortlistBody"
      responses:
        200:
          description: Created or Updated Resource

  /shortlists/archives:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Shortlists
      description: Fetch all archives recruiter shortlist data
      responses:
        200:
          description: Returns all archives recruiter shortlist data

  /shortlists/archive:
    post:
      tags:
        - Shortlists
      description: Archive shortlists
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to archive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Archive Successful

  /shortlists/unarchive:
    post:
      tags:
        - Shortlists
      description: Unarchive shortlists
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to unarchive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Unarchive Successful

  /videos:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Videos
      description: Fetch all video interviews
      responses:
        200:
          description: Returns all video interviews
    post:
      tags:
        - Videos
      description: Create or Update a Video
      parameters:
        - name: video
          in: body
          description: a video
          required: true
          schema:
            $ref: "#/definitions/VideoBody"
      responses:
        201:
          description: Video Created

  /videos/{id}:
    get:
      tags:
        - Videos
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the example to retrieve
          type: string
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not found
    delete:
      tags:
        - Videos
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: id
          in: path
          required: true
          description: The users id
          type: string
      responses:
        204:
          description: The candidate video interview with the specified ID was successfully deleted
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Candidate video unterview with given IDs did not exist

  /videos/archives:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Videos
      description: Fetch all archives video interviews
      responses:
        200:
          description: Returns all archives video interviews

  /videos/archive:
    post:
      tags:
        - Videos
      description: Archive videos
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to archive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Archive Successful

  /videos/unarchive:
    post:
      tags:
        - Videos
      description: Unarchive videos
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to unarchive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Unarchive Successful

  /interviews:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Interviews
      description: Fetch all interviews
      responses:
        200:
          description: Returns all interviews
    post:
      tags:
        - Interviews
      description: Create an Interview
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: interview
          in: body
          description: a new interview
          required: true
          schema:
            $ref: "#/definitions/InterviewBody"
      responses:
        201:
          description: Video Created

  /interviews/{id}:
    get:
      tags:
        - Interviews
      parameters:
        - name: id
          in: path
          required: true
          description: The object id of the interview to get
          type: string
      responses:
        200:
          description: The interview with the specified ID was successfully returned
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Interview with given ID did not exist
    delete:
      tags:
        - Interviews
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: id
          in: path
          required: true
          description: The object id of the interview to delete
          type: string
      responses:
        204:
          description: The interview with the specified ID was successfully deleted
        400:
          description: Malformed ID, the ID has to be a 12 character string
        404:
          description: Interview with given ID did not exist

  /interviews/archives:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Interviews
      description: Fetch all archives interviews
      responses:
        200:
          description: Returns all archives interviews

  /interviews/archive:
    post:
      tags:
        - Interviews
      description: Archive interviews
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to archive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Archive Successful

  /interviews/unarchive:
    post:
      tags:
        - Interviews
      description: Unarchive interviews
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: ids
          in: body
          description: ids to unarchive
          required: true
          schema:
            $ref: "#/definitions/ArchiveBody"
      responses:
        200:
          description: Unarchive Successful

  /candidates/{email}:
    get:
      tags:
        - Candidates
      parameters:
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
      responses:
        200:
          description: Fetched the candidates info
        400:
          description: Malformed ID
        404:
          description: Candidate with given ID did not exist
    put:
      tags:
        - Candidates
      description: Create/Update Candidate Data
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
        - in: body
          name: body
          description: an example
          required: true
          schema:
            $ref: "#/definitions/CandidateBody"
      responses:
        200:
          description: Created or Updated Resource

  /candidates/{email}/documents/:
    post:
      tags:
        - Candidates
      description: Upload candidate documents to S3
      consumes:
        - multipart/form-data
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
        - in: formData
          name: upfile
          type: file
          description: The file to upload.

      responses:
        200:
          description: Created file on S3

  /candidates/{email}/documents/{id}:
    get:
      tags:
        - Candidates
      description: Get candidate document from s3
      parameters:
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
        - name: id
          in: path
          required: true
          description: num of file
          type: string
      responses:
        200:
          description: Got file from S3
    delete:
      tags:
        - Candidates
      description: Delete candidate subdocument
      parameters:
        - name: email
          in: path
          required: true
          description: the candidates email
          type: string
        - name: id
          in: path
          required: true
          description: id of file to delete
          type: string
      responses:
        200:
          description: file deleted
  /emails:
    post:
      tags:
        - Emails
      parameters:
        # - name: authorization
        #   in: header
        #   description: Bearer <auth_token>
        #   required: true
        #   type: string
        - in: body
          name: body
          description: "Send emails from russell@deephire.com"
          required: true
          schema:
            $ref: "#/definitions/EmailBody"
      responses:
        201:
          description: Email sent
        500:
          description: Error!

  /companies:
    get:
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
      tags:
        - Companies
      description: Fetch all companyData
      responses:
        200:
          description: companyData fetched successfully
    post:
      tags:
        - Companies
      parameters:
        - name: authorization
          in: header
          description: Bearer <auth_token>
          required: true
          type: string
        - in: body
          name: body
          description: "Add Company Name or Logo"
          required: true
          schema:
            $ref: "#/definitions/CompanyBody"
      responses:
        201:
          description: Info Added
        500:
          description: Error!

  /companies/{email}:
    get:
      tags:
        - Companies
      parameters:
        - name: email
          in: path
          required: true
          description: The email of the company to retrieve
          type: string
      responses:
        200:
          description: Return the company with the associated recruiter email
        404:
          description: A company with that recruiter email is not found
  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification

  /files/{key}:
    post:
      tags:
        - Files
      description: Upload file documents to S3
      consumes:
        - multipart/form-data
      parameters:
        - name: key
          in: path
          required: true
          description: key
          type: string
        - in: formData
          name: upfile
          type: file
          description: The file to upload.

      responses:
        200:
          description: Created file on S3
